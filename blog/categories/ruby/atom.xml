<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Kate Chapman - Maploser]]></title>
  <link href="http://maploser.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://maploser.com/"/>
  <updated>2012-11-30T16:45:51+08:00</updated>
  <id>http://maploser.com/</id>
  <author>
    <name><![CDATA[Kate Chapman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Further Adventures in Rails Testing]]></title>
    <link href="http://maploser.com/blog/2009/09/27/further-adventures-in-rails-testinghudsonmicr/"/>
    <updated>2009-09-27T20:21:54+08:00</updated>
    <id>http://maploser.com/blog/2009/09/27/further-adventures-in-rails-testinghudsonmicr</id>
    <content type="html"><![CDATA[<p>Yesterday I went to "<a href="http://www.meetup.com/rubyhacknight/calendar/11340056/">Hack Day 'Effective Testing for Rails Projects'</a>" at <a href="http://www.viget.com/">Viget Labs</a> in Falls Church. Â After Ruby DCamp I decided I was severely lacking in testing skills as a developer and I'm trying to do something to remedy that. Â With the promise of "building a simple Rails application and a pair-programming environment" as well as "demonstrating effective testing techniques" I was sold.</p>

<p>I come from a Quality Assurance background so I am used to testing software as it is written. Â Just in the past week have I felt like I am beginning to grasp testing software while it is written. Â The live coding at Hack Day helped further that. Â  The example application we used was "<a href="http://github.com/mig/outtolunch">Out To Lunch</a>," which is a simple app that utilizes the <a href="http://www.yelp.com/developers/documentation">Yelp API</a> to search for locations to eat and then will tell you where to eat lunch each day.</p>

<p>The session was lead by <a href="http://www.viget.com/about/team/preagan">Patrick Reagan</a> and <a href="http://www.viget.com/about/team/mswasey">Matt Swasey</a>, who did "Ping Pong Pairing" a type of paired programming I'd never seen before. Â In ping pong pairing one developer writes a single test and then runs it and it fails. Â Then the 2nd programmer writes code to make the test pass. Â After that the first programmer writes another test and so on. Â I'm a little bit competitive in nature and I think this would be a great way to pair. Â Patrick and Matt each had their own keyboard and mouse and think that helps make the switching in this case go more smoothly.</p>

<p>We started with the Out to Lunch application from the beginning initially writing a test that asserted "should be able to accept a zip code" in the YelpSearcher class. Â From there the code was written to accept the ZIP code and so on. Â It was interesting to watch people work together and troubleshoot. Â Since I'm fairly new to Ruby on Rails just watching people programming in it teaches me new techniques. Â I also got some term definitions further straight in my head such as stub "a dummy object that will return whatever you want." Â I had never thought about when and where I should be using stubs in my testing before but now it really makes sense for unit tests, since you would want to break the code down to the simplest action possible.</p>

<p>I learned a ton in the three hour class and will be checking out <a href="http://www.meetup.com/rubyhacknight/">Ruby Hack Night</a> soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby DCamp Day Two]]></title>
    <link href="http://maploser.com/blog/2009/09/20/ruby-dcamp-day-2/"/>
    <updated>2009-09-20T16:59:46+08:00</updated>
    <id>http://maploser.com/blog/2009/09/20/ruby-dcamp-day-2</id>
    <content type="html"><![CDATA[<p>In the past I've had a history of only posting about the first day of a barcamp.Â  This is my attempt to buck that trend.</p>

<p>The second day of <a href="http://www.rubydcamp.org/">Ruby DCamp</a> was just as awesome as the first.Â  For visual proof of how great it was there is the <a href="http://www.flickr.com/search/?q=rubydcamp">rubydcamp tag on flickr</a>. There is something special about making an unconference truly self sustained, it takes the "hallway conversation" to the next level and it becomes the "stabbing meat with sticks to feed 30 people conversation."Â  That is what happens when you help make kabobs for lunch the second day.Â  I'm sure there were also great "drag the grill between the pavillion and the camp site conversations" and "carry enough firewood for the evening conversation."Â  These aren't normally geek conversation environments and I think it adds a great new dimension to the unconference.Â  Or in this case "Ruby Woodstock" as <a href="http://evan.tiggerpalace.com/">Evan Light</a> refered to it at some point.Â  I hope to see more barcamp's follow this trend.Â  Thanks to Evan and everyone who made Ruby DCamp a great experience.</p>

<p>I'm still digesting the technical knowledge I've learned, but I'll share that at some point in my own geo-way here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby DCamp Day One]]></title>
    <link href="http://maploser.com/blog/2009/09/19/ruby-dcamp-day-one/"/>
    <updated>2009-09-19T06:11:21+08:00</updated>
    <id>http://maploser.com/blog/2009/09/19/ruby-dcamp-day-one</id>
    <content type="html"><![CDATA[<p>This is really a non-geo post, but I currently do a lot of geo-related programming in Ruby.</p>

<p><a href="http://rubydcamp.org/">Ruby DCamp</a> is the first unconference/barcamp I've attended where we actually camped.  I've been to barcamps such as <a href="http://wherecamp.pbworks.com/">WhereCamp</a> that had a history of camping, but happened to be unable to the year I attended. Â So far I think hosting the event in a part has been brilliant. Â There has been wireless access, but since it is provided by peoples' broadband cards the request has been to be kind.</p>

<p>I think this has lead to people talking to each other even more than some other events I've attended. Â As a relatively new rubyist I've learned a ton of techniques to try and tools to checkout. Â  One session was pair programming to practice writing tests. The application we started to write was <a href="http://github.com/edgecase/ruby_koans/blob/master/koans/GREED_RULES.txt">Greed</a>, a relatively simple dice game. Â I think after going through that process I now could sit down with no code written and begin by writing tests instead of hacking some code out and then attempting to write tests in order to test it. Â What was key for me was discussing things with someone and having them direct me in what tests we should write.</p>

<p>My favorite gem today was <a href="http://github.com/technicalpickles/jeweler">Jeweler</a>, when I've written gems up to this point I've created the gemspec and the file structure myself. Â It never occurred to me to find a "rails like" tool to do that for me. Â Â Jeweler even integrates instantly with <a href="http://github.com/">Github</a> and can set-up your repository for you. Â We walked through the creation of a simple gem to learn the required commands. Â It all starts with "jeweler your_gem_name" and then your gem structure is created and you just fill in the details.</p>

<p>One thought I had today was I would love to see a WhereCamp out in a park someday. Â I know that in the past there has been camping on corporate headquarters, but there is something cool about the park vibe. Â Today I could imagine people mapping the various park trails for OSM for example. Â Someday I would like to have a WhereCamp in <a href="http://www.nps.gov/prwi/index.htm">Prince William Park</a>. Â There is nothing wrong with <a href="http://www.nvrpa.org/parks/bullrun/index.php">Bull Run Park</a>, but Prince William has huge campgrounds with industrial kitchens and dining halls so it would allow for projectors and maybe ease in feeding a larger group.</p>

<p>So far this has been a great event and can't wait to see what tomorrow brings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter/Latitude Location Updater]]></title>
    <link href="http://maploser.com/blog/2009/05/05/twitterlatitude-location-updater/"/>
    <updated>2009-05-05T06:15:46+08:00</updated>
    <id>http://maploser.com/blog/2009/05/05/twitterlatitude-location-updater</id>
    <content type="html"><![CDATA[<p>Today Google opened up the <a href="http://www.google.com/latitude/apps/badge">Latitude</a> feed so you can get your Latitude location in a KML or JSON feed. Â I have been working on a longer term project to create a Twitter updater service but to play with the Latitude feed I wrote a quick Ruby script. Â With the json and twitter gems it was barely any work at all. Â </p>

<p>The steps are essentially grab your Latitude info in JSON, extract out the latitude and longitude, authenticate with Twitter and then update your location in your profile. Â The magic code is below. Â  To make it work with your Twitter and Latitude accounts just substitute your Latitude feed URL and insert your Twitter username/password pair. Â You can look-up the appropriate URL <a href="http://www.google.com/latitude/apps/badge">here</a>.</p>

<p>For the time being I'm just going to run a cron job on my desktop but eventually I will set-up a service where people can register to have their profiles updated. Â I don't think I'll just stick to Latitude, I'd like to use some other services as well.</p>

<pre><code>require 'net/http'
require 'uri'
require 'rubygems'
require 'json'
require 'twitter'

url = URI.parse('http://www.google.com')
  latloc = Net::HTTP.start(url.host, url.port) {|http|
    http.get('/latitude/apps/badge/api?user=youruserid&amp;type=json')
}
data = latloc.body
json = JSON.parse(data)
feature = json['features'][0]['geometry']['coordinates']
where = Â feature[1].to_s &lt;&lt; ' ' &lt;&lt; feature[0].to_s
httpauth = Twitter::HTTPAuth.new('username', 'password')
base = Twitter::Base.new(httpauth)
base.update_profile('location=' + where)
</code></pre>
]]></content>
  </entry>
  
</feed>
